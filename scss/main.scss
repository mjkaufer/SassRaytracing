@import 'trig';
@import 'consts';
@import 'spheres';

@function dot($vector-a, $vector-b) {
	$sum: 0;

	@for $i from 1 through length($vector-a) {
		$sum: $sum + nth($vector-a, $i) * nth($vector-b, $i);
	}

	@return $sum;
}

@function sub($vector-a, $vector-b) {
	$vec: ();

	@for $i from 1 through length($vector-a) {
		$vec: append($vec, nth($vector-a, $i) - nth($vector-b, $i));
	}

	@return $vec;

}

@function distance-squared($vector) {
	@return dot($vector, $vector);
}

@function collide($ray-direction) {

	$last-t: null;
	$last-i: null;

	/* sass indexes at 1; let's be polite */
	$i: 1;
	@each $sphere in $spheres {

		$ray-origin: sub((0, 0, 0), map-get($sphere, pos));

		$a: distance-squared($ray-direction);
		$b: 2 * dot($ray-origin, $ray-direction);
		$c: distance-squared($ray-origin) - pow(map-get($sphere, radius), 2);

		$d: $b * $b - 4 * $a * $c;

		@if $d >= 0 {
			$t: (-$b - sqrt($b * $b - 4 * $a * $c)) / ($a * 2);

			@if ($last-t == null or $t < $last-t) and $t >= 0 {
				$last-t: $t;
				$last-i: $i;
			}
		}

		$i: $i + 1;
	}

	@if $last-t != null {
		@return ($last-t, $last-i);
	}

	@return (null, null);

	
}

$k: tan(rad($fov));

$z: -1;

@for $r from 1 through $height {
	@for $c from 1 through $width {
		$x: $r * 2 * $k / $width - $k;
		$y: $c * 2 * $k / $height - $k;

		$ray: $x, $y, $z;

		$sphere-index: nth(collide($ray), 2);

		@if $sphere-index != null {
			$sphere: nth($spheres, $sphere-index);

			@if $sphere-index != null {
				.p-#{$r}-#{$c} {
					background-color: map-get($sphere, col) !important;
				}
			}	
		}
		
	}
}

$n: render();

.row {
	display: inline-block;
}

.pixel {
	height: 2px;
	width: 2px;
	background-color: red;
	margin: 0;
	padding: 0;
}