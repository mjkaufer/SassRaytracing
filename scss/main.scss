@import 'trig';
@import 'consts';
@import 'spheres';
@import 'lights';
@import 'util';

@function collide($ray-direction, $ray-origin, $current-spheres) {

	$last-t: null;
	$last-i: null;

	/* sass indexes at 1; let's be polite */
	$i: 1;
	@each $sphere in $current-spheres {

		$relative-ray-origin: sub($ray-origin, map-get($sphere, pos));

		$a: distance-squared($ray-direction);
		$b: 2 * dot($relative-ray-origin, $ray-direction);
		$c: distance-squared($relative-ray-origin) - pow(map-get($sphere, radius), 2);

		$d: $b * $b - 4 * $a * $c;

		@if $d >= 0 {
			$t: (-$b - sqrt($d)) / ($a * 2);

			@if ($last-t == null or $t < $last-t) and $t >= 0 {
				$last-t: $t;
				$last-i: $i;
			}
		}

		$i: $i + 1;
	}

	@if $last-t == null {
		@return (null, null, null);	
	}

	$closest-sphere: nth($current-spheres, $last-i);
	$relative-ray-origin: sub($ray-origin, map-get($closest-sphere, pos));

	$intersection-point: add(mult-scalar($ray-direction, $last-t), $relative-ray-origin);
	$intersection-point: add(map-get($closest-sphere, pos), $intersection-point);

	@return ($last-t, $last-i, $intersection-point);


	
}

$k: tan(rad($fov / 2.0));

$z: -1;
$origin: (0, 0, 0);

@for $r from 1 through $height {
	@for $c from 1 through $width {
		$colors: ();

		@for $sphere-index from 1 through length($all-spheres) {
			$current-spheres: nth($all-spheres, $sphere-index);
			$x: $c * 2 * $k / $width - $k;
			$y: -1 * ($r * 2 * $k / $height - $k);

			$ray: normalize(($x, $y, $z));

			$collision-data: collide($ray, $origin, $current-spheres);

			$colliding-sphere-index: nth($collision-data, 2);
			$collision-position: nth($collision-data, 3);

			$current-color: (0, 0, 0);

			@if $colliding-sphere-index != null {
				$sphere: nth($current-spheres, $colliding-sphere-index);
				$n-vector: get-sphere-normal($sphere, $collision-position);
				$sphere-color: map-get($sphere, col);

				// $current-color: add($sphere-color, $current-color);

				@each $light in $lights {
					$light-origin: map-get($light, pos);
					$light-direction: sub($collision-position, $light-origin);


					$light-collision: collide($light-direction, $light-origin, $current-spheres);

					$light-collision-position: nth($light-collision, 3);

					@if $light-collision-position != null {
						$position-difference: distance-squared(sub($collision-position, $light-collision-position));

						// if the collisions are basically the same, to account for floating point error
						@if $position-difference < 0.05 {
							$l-vector: normalize(sub($light-origin, $collision-position));
							$light-color: mult-scalar(map-get($light, col), max(dot($l-vector, $n-vector), 0));
							$light-color: pairwise-mult($light-color, $sphere-color);

							$current-color: add($current-color, $light-color);
						}
					}
				}

				$colors: append($colors, $current-color);
			} @else {
				$colors: append($colors, ($bg));
			}
		}

		$all-bg: true;
		$all-same-color: false;
		$first-color: nth($colors, 1);

		@for $i from 1 through length($colors) {
			@if not colors-equal(nth($colors, $i), $bg) {
				$all-bg: false;
			}
			@if not colors-equal(nth($colors, $i), $first-color) {
				$all-same-color: false;
			}
		}

		@if $all-bg {

		} @else if $all-same-color {
			#p-#{$r}-#{$c} {
				background-color: rgb(scale-to-rgb($first-color)...);
			}
		} @else {
			@keyframes anim-#{$r}-#{$c} {
				@for $i from 1 through length($colors) {
					#{($i - 1) * 100 / length($colors)}% {
						background-color: rgb(scale-to-rgb(nth($colors, $i))...);
					}
				}
			}

			#p-#{$r}-#{$c} {
				animation-name: anim-#{$r}-#{$c};
				background-color: rgb(scale-to-rgb(nth($colors, 1))...);
			}
		}

		
	}
}

$n: render();

.col {
	display: inline-block;
}

.pixel {
	height: 2px;
	width: 2px;
	background-color: rgb(scale-to-rgb($bg)...);
	margin: 0;
	padding: 0;
	transition: 0.5s all;
	animation-timing-function: linear;
	animation-duration: 0.5s;
	animation-iteration-count: infinite;
}